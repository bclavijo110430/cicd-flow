name: Build and Deploy to GKE

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT}} # ID del proyecto de Google Cloud
  DEPLOYMENT_NAME: ${{ vars.DEPLOYMENT_NAME }} # Nombre de la implementación de Kubernetes que se utilizará
  IMAGE: ${{ vars.IMAGE }} # Nombre de la imagen Docker que se utilizará

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: prodgke # Entorno de implementación de Kubernetes en Google Cloud

    steps:
    # Clonar el repositorio
    - name: Checkout
      uses: actions/checkout@v3
    # Autenticar con las credenciales de Google Cloud
    - name: auth google 
      id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
       credentials_json: ${{ secrets.GKE_SA_KEY }}

    # Instalar el SDK de Google Cloud y configurar el clúster
    - name: 'Set up Cloud SDK and set up cluster'
      uses: 'google-github-actions/setup-gcloud@v1'  
    - run: |-
        gcloud container clusters create  ${{ vars.GKE_CLUSTER }} --machine-type ${{ vars.GKE_MACHINE_TYPE }} --num-nodes ${{ vars.GKE_NUM_NODES }} --zone ${{ vars.GKE_ZONE }}
        gcloud --quiet auth configure-docker
    # Obtener las credenciales de GKE para poder implementar en el clúster
    - uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name:  ${{ vars.GKE_CLUSTER }}
        location: ${{ vars.GKE_ZONE }}

    # Compilar la imagen Docker
    - name: Build
      run: |-
        docker build .  --file ./Dockerfile --tag "gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE }}:$GITHUB_SHA" 
    # Publicar la imagen Docker en Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE }}:$GITHUB_SHA"
    # Configurar kustomize y desplegar en Kubernetes
    - name: Deploy
      run: |-
        # Copiar el archivo de configuración de kustomize a un archivo temporal
        cp ./kustomize/kustomization.yaml /tmp/kustomization.yaml
        # Realizar una interpolación de variables en el archivo temporal
        envsubst "$(printf '${%s} ' $(env | cut -d'=' -f1))" < /tmp/kustomization.yaml > ./kustomize/kustomization.yaml      
        # Cambiar el directorio actual a donde se encuentra el archivo de configuración de kustomize
        cd ./kustomize
        # Compilar y aplicar las configuraciones de kustomize a Kubernetes
        kustomize build . | kubectl apply -f -
        # Esperar hasta que se complete el proceso de implementación
        kubectl rollout status deployment/$DEPLOYMENT_NAME -n cyberexpert
        # Obtener la información del servicio que se ha implementado
        kubectl -n cyberexpert get services -o wide
        # Esperar para asegurarse de que el servicio esté listo
        sleep 50s
        # extrae la direccion ip publica del balaceador para su acceso a atravez del puerto 8000 publico
        kubectl -n cyberexpert  get  svc cyberexp-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
   # tiempo de prueba para validar endpoint 
    - name: Test Endpoint
      run: |-
        #espera 2 minutos para validar el endpoint del despliegue 
        sleep 200s
        exit 

    - name: limpieza de recursos 
      run: |-
         # elimina el cluster GKE 
         gcloud container clusters delete  ${{ vars.GKE_CLUSTER }} --zone ${{ vars.GKE_ZONE }} --quiet



